//
//  JobRequestViewController.swift
//  DriveTime
//
//  Created by Wing Sun Cheung on 9/18/18.
//  Copyright (c) 2018 Wing Sun Cheung. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol JobRequestDisplayLogic: class {
    func displayJobRequests(viewModel: [JobRequest.fetchJobRequest.ViewModel])
    func displayError(message: String)
    func refreshJobRequestList()
    func displayErrorOnAcceptingJobRequest()
}

class JobRequestCell: UITableViewCell {
    @IBOutlet weak var jobRequestCell: JobRequestView!
}

class JobRequestViewController: UIViewController {
    
    @IBOutlet weak var blurrLoadingScreen: UIVisualEffectView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var loadingIcon: NVActivityIndicatorView!
    
    private let DEQUEUE_REUSABLE_CELL_INDENTIFIER = "jobRequest"
    private let REFRESH_CONTROL_DESCRIPTION = "Fetching Job Requests"
    private var jobRequestsviewModelData: [JobRequest.fetchJobRequest.ViewModel]?
    private let refreshController = UIRefreshControl()
    
    var email: String?
    var password: String?
    var interactor: JobRequestBusinessLogic?
    var router: (NSObjectProtocol & JobRequestRoutingLogic & JobRequestDataPassing)?
    
    override func viewDidLoad() {
        
        super.viewDidLoad()
        setup()
        interactor?.fetchJobRequest(email: email)
        LoadingScreenUtils.startLoadingScreen(toAnimate: true, loadingScreen: blurrLoadingScreen, loadingIcon: loadingIcon)
    }
}

// MARK :- UITableViewDataSource

extension JobRequestViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        var count = 0
        if let viewModels = jobRequestsviewModelData {
            count = viewModels.count
        }
        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: DEQUEUE_REUSABLE_CELL_INDENTIFIER, for: indexPath) as! JobRequestCell
        
        cell.jobRequestCell.setDelegate(delegate: self)
        
        if let viewModels = jobRequestsviewModelData {
            let viewModelAtIndexPath = viewModels[indexPath.row]
            cell.jobRequestCell.jobRequestDescription.text = viewModelAtIndexPath.description
            cell.jobRequestCell.jobRequestAmountOffered.text = viewModelAtIndexPath.amountOffered
            cell.jobRequestCell.jobRequestCompanyName.text = viewModelAtIndexPath.companyName
            cell.jobRequestCell.id = viewModelAtIndexPath.id
        }
        return cell
    }
}

// MARK :- UITableViewDelegate

extension JobRequestViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        
    }
}

// MARK :- JobRequestDisplayLogic implementation

extension JobRequestViewController: JobRequestDisplayLogic {
    
    func refreshJobRequestList() {
        interactor?.fetchJobRequest(email: email)
    }
    
    func displayErrorOnAcceptingJobRequest() {
        
    }
    
    
    func displayError(message: String) {
        
        let alertController = UIAlertController(title: "Job Requests", message:  message, preferredStyle: .alert)
        let action = UIAlertAction(title: "Okay", style: .default)
        alertController.addAction(action)
        self.present(alertController, animated: true, completion: nil)
        LoadingScreenUtils.startLoadingScreen(toAnimate: false, loadingScreen: blurrLoadingScreen, loadingIcon: loadingIcon)
        
        refreshController.endRefreshing()
    }
    
    func displayJobRequests(viewModel: [JobRequest.fetchJobRequest.ViewModel]) {
        LoadingScreenUtils.startLoadingScreen(toAnimate: false, loadingScreen: blurrLoadingScreen, loadingIcon: loadingIcon)
        
        jobRequestsviewModelData = viewModel
        refreshController.endRefreshing()
        tableView.reloadData()
    }
}

extension JobRequestViewController: OnAcceptJobRequest {
    func onAcceptJobRequestButtonDidTouch(id: String?) {
        log.debug("On accept job request id touched: \(String(describing: id))")
        interactor?.acceptJobRequest(id: id, email: email)
    }
}

// MARK: - Setup VIP cycle and refresh control

extension JobRequestViewController {
    
    private func setup() {
        let viewController = self
        let interactor = JobRequestInteractor()
        let presenter = JobRequestPresenter()
        let router = JobRequestRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        refreshController.attributedTitle = NSAttributedString(string: REFRESH_CONTROL_DESCRIPTION)
        refreshController.addTarget(self, action: #selector(onRefresh), for: .valueChanged)
        
        tableView.addSubview(refreshController)
        tableView.dataSource = self
        tableView.delegate = self
    }
    
    @objc func onRefresh() {
        interactor?.fetchJobRequest(email: email)
    }
}




