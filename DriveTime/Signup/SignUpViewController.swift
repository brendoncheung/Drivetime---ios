//
//  SignUpViewController.swift
//  DriveTime
//
//  Created by Wing Sun Cheung on 8/18/18.
//  Copyright (c) 2018 Wing Sun Cheung. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Eureka
import ImageRow

protocol SignUpDisplayLogic: class
{
    func displaySomething(viewModel: SignUp.RegisterNewUser.ViewModel)
}

class SignUpViewController: FormViewController, SignUpDisplayLogic
{
    var interactor: SignUpBusinessLogic?
    var router: (NSObjectProtocol & SignUpRoutingLogic & SignUpDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SignUpInteractor()
        let presenter = SignUpPresenter()
        let router = SignUpRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    private func createForm() {
        
        var userForm = SignUp.RegisterNewUser.Request()
        
        form +++ Section("Personal Information")
            
            <<< TextRow("name"){
                $0.title = "Name"
                $0.onChange({ (row) in
                    userForm.name = row.value
                })
            }
            
            <<< EmailRow("emailAddress") {
                $0.title = "Email address"
                $0.add(rule: RuleRequired())
                $0.add(rule: RuleEmail())
                $0.onChange({ (row) in
                    userForm.email = row.value
                })
                $0.validationOptions = .validatesOnChangeAfterBlurred }
                .cellUpdate { cell, row in
                    if !row.isValid {
                        cell.titleLabel?.textColor = .red
                    }
            }
            
            <<< PhoneRow("number") {
                $0.title = "Phone number"
                $0.onChange({ (row) in
                    userForm.number = row.value
                })
            }
            
            <<< IntRow("experience") {
                $0.title = "Years of experience"
                $0.onChange({ (row) in
                    userForm.experience = String(describing: row.value)
                })
            }
            
            <<< TextRow("city") {
                $0.title = "Current city"
                $0.onChange({ (row) in
                    userForm.city = row.value
                })
            }
            
            +++ Section()
            
            <<< PasswordRow("password") {
                $0.title = "Password"
                $0.onChange({ (row) in
                    userForm.password = row.value
                })
            }
            
            <<< PasswordRow() {
                $0.title = "Confirm password"
                $0.add(rule: RuleEqualsToRow(form: form, tag: "password"))
                }.cellUpdate({ (cell, row) in
                    if !row.isValid {
                        cell.titleLabel?.textColor = .red
                    }
                })
            
            +++ Section("Driving record")
            
            <<< IntRow("cdl") {
                $0.title = "CDL number"
                $0.onChange({ (row) in
                    userForm.cdl = String(describing: row.value)
                })
            }
            
            +++ Section()
            
            <<< ButtonRow() {
                $0.title = "Sign Up"
                $0.onCellSelection({ [unowned self] (cell, row) in
                    log.debug("Sign up button did touch")
                    
                    switch self.form.validate().isEmpty {
                        
                    case true:
                        
                        log.debug("Form complete")
                        log.debug(String(describing: userForm))
                        
                        self.interactor?.performRegistration(request: userForm)
                        
                    case false:
                        
                        log.debug("Form incomplete")
                    }
                })
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        createForm()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = SignUp.RegisterNewUser.Request()
        interactor?.performRegistration(request: request)
    }
    
    func displaySomething(viewModel: SignUp.RegisterNewUser.ViewModel) {
        
        
        
        //nameTextField.text = viewModel.name
    }
}
